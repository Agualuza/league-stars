/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import projetogame.Adversarios;
import projetogame.Dados;
import projetogame.Partidas;
import projetogame.Players;
import projetogame.Times;
import projetogame.Treinadores;

/**
 *
 * @author iagoagualuza
 */
public class PartidasFinais extends javax.swing.JFrame {

    /**
     * Creates new form PartidasFinais
     */
    public PartidasFinais() {
        initComponents();
        String string = "#8895bd";
        Color cor = Color.decode(string);
        this.getContentPane().setBackground(cor);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CBLoL");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("jLabel2");

        jLabel3.setText("X");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("jLabel4");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(154, 154, 154)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addContainerGap(243, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PartidasFinais.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PartidasFinais.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PartidasFinais.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PartidasFinais.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PartidasFinais().setVisible(true);
            }
        });
    }
    public void recebeDados(int idTime,int idTreinador,int rodada) {
        Treinadores treinador = new Treinadores();
        Times time = new Times();
        Partidas partida = new Partidas();
        Adversarios adversario = new Adversarios();
        Players player = new Players();
        Principal janelaPrincipal = new Principal();
       
        partida = partida.selectPartidasFinaisByTime(idTime, idTreinador, rodada);
        
        
        String corFundoTime1 = time.selectTimesCorFundo(partida.getIdTime1());
        String corTextoTime1 = time.selectTimesCorTexto(partida.getIdTime1());
        String corFundoTime2 = time.selectTimesCorFundo(partida.getIdTime2());
        String corTextoTime2 = time.selectTimesCorTexto(partida.getIdTime2());
        
        
        Color corFundo1 = Color.decode(corFundoTime1);
        Color corTexto1 = Color.decode(corTextoTime1);
        Color corFundo2 = Color.decode(corFundoTime2);
        Color corTexto2 = Color.decode(corTextoTime2);
        int id1 = partida.getIdTime1();
        int id2 = partida.getIdTime2();
        String time1 = time.selectTimesNome(partida.getIdTime1());
        String time2 = time.selectTimesNome(partida.getIdTime2());
        
        jLabel2.setText(time1);
        jLabel4.setText(time2);
        jLabel2.setOpaque(true);
        jLabel4.setOpaque(true);
        jLabel2.setForeground(corTexto1);
        jLabel4.setForeground(corTexto2);
        jLabel2.setBackground(corFundo1);
        jLabel4.setBackground(corFundo2);
        
        Map<String,Players> players = player.selectPlayers(id1);
        time.selectAdversario(idTime); 
        int idAdversario = 0;
       
        
        Map<String,Players> adversarios = adversario.selectPlayers(id2);
        partida.selectPartidas(id1, id2);
        float playersLambda = player.calculaLambda(players);
        float adversariosLambda = adversario.calculaLambda(adversarios);
        long segPlayers = player.calculaTempo(playersLambda, adversariosLambda);
        long segAdversarios = adversario.calculaTempo(adversariosLambda,playersLambda);
        
        Partidas partidaAux = new Partidas();
        partidaAux.setFlag(0);
        partidaAux.setFirstBlood(0);
        Times t1 = new Times();
        Times t2 = new Times();
        t1.setFlag(4);
        t2.setFlag(4);
        
        List<String> listaEventos = new ArrayList<>();
        listaEventos.add(" conseguiu o first blood");
        listaEventos.add(" destruiu a primeira torre (BOT)");
        listaEventos.add(" destruiu a primeira torre (MID)");
        listaEventos.add(" destruiu a primeira torre (TOP)");
        
        List<String> listaEventos2 = new ArrayList<>();
        listaEventos2.add(" conseguiu o first blood");
        listaEventos2.add(" destruiu a primeira torre (BOT)");
        listaEventos2.add(" destruiu a primeira torre (MID)");
        listaEventos2.add(" destruiu a primeira torre (TOP)");
        
     
        
        Timer timer = new Timer();
            
        TimerTask task = new TimerTask() {
                
            @Override
            public void run() {
                int j = (int) (Math.random() * t1.getFlag()); 
                int x = 1 + (int) (Math.random() * 5);
                String jogador = "player" + x;
                String pl = players.get(jogador).getNome();
                if (partidaAux.getFirstBlood() == 1 && listaEventos.get(j) == " conseguiu o first blood") {
                    
                } else {
                    jLabel5.setText(pl+listaEventos.get(j));
                }
                
                if (listaEventos.get(j) == " conseguiu o first blood")  {
                    listaEventos.remove(j);
                    listaEventos.add(" destruiu o primeiro dragão");
                    partidaAux.setFirstBlood(1);
                    
                } else if (listaEventos.get(j) == " destruiu a primeira torre (BOT)"){
                    listaEventos.remove(j);
                    listaEventos.add(" destruiu a segunda torre (BOT)");
                } else if (listaEventos.get(j) == " destruiu a primeira torre (MID)"){
                    listaEventos.remove(j);
                    listaEventos.add(" destruiu a segunda torre (MID)");
                } else if (listaEventos.get(j) == " destruiu a primeira torre (TOP)"){
                    listaEventos.remove(j);
                    listaEventos.add(" destruiu a segunda torre (TOP)");
                } else if (listaEventos.get(j) == " destruiu a segunda torre (BOT)"){
                    listaEventos.remove(j);
                    listaEventos.add(" destruiu a terceira torre (BOT)");
                } else if (listaEventos.get(j) == " destruiu a segunda torre (MID)"){
                    listaEventos.remove(j);
                    listaEventos.add(" destruiu a terceira torre (MID)");
                } else if (listaEventos.get(j) == " destruiu a segunda torre (TOP)"){
                    listaEventos.remove(j);
                    listaEventos.add(" destruiu a terceira torre (TOP)");
                } else if (listaEventos.get(j) == " destruiu a terceira torre (BOT)"){
                    listaEventos.remove(j);
                    listaEventos.add(" destruiu a o inibidor (BOT)");
                } else if (listaEventos.get(j) == " destruiu a terceira torre (MID)"){
                    listaEventos.remove(j);
                    listaEventos.add(" destruiu a o inibidor (MID)");
                } else if (listaEventos.get(j) == " destruiu a terceira torre (TOP)"){
                    listaEventos.remove(j);
                    listaEventos.add(" destruiu a o inibidor (TOP)");
                } else if (listaEventos.get(j) == " destruiu o primeiro dragão") {
                    listaEventos.remove(j);
                    listaEventos.add(" destruiu o segundo dragão");
                } else if (listaEventos.get(j) == " destruiu o segundo dragão") {
                    listaEventos.remove(j);
                    listaEventos.add(" destruiu o arauto");
                } else if (listaEventos.get(j) == " destruiu o arauto"){
                    listaEventos.remove(j);
                    t1.setFlag(3);
                } else if (listaEventos.get(j).contains("inibidor")){
                    listaEventos.remove(j);
                    listaEventos.add(" destruiu as torres do nexus");
                } else if (listaEventos.get(j) == " destruiu as torres do nexus" ) {
                    listaEventos.remove(j);
                    listaEventos.add(" destruiu o nexus");
                } else if (listaEventos.get(j) == " destruiu o nexus"){
                    Dados d = new Dados();
                    d.updateFinais(idTreinador, id1,rodada);

                    int aux = partidaAux.getFlag()+1;
                    partidaAux.setFlag(aux);

                    setVisible(false);
                    janelaPrincipal.setLocationRelativeTo(null);
                    janelaPrincipal.setVisible(true);
                    janelaPrincipal.recebeDados(idTreinador,rodada+1);

                    timer.cancel();
                }
                 
               
            }
        };
        timer.scheduleAtFixedRate(task, segPlayers, player.calculaTempo(playersLambda,adversariosLambda));
        
        TimerTask task2 = new TimerTask() {
            
            @Override
            public void run() {
                
                int j = (int) (Math.random() * t2.getFlag()); 
                int x = 1 + (int) (Math.random() * 5);
                String jogador = "adversario" + x;
                String pl = adversarios.get(jogador).getNome();
                if (partidaAux.getFirstBlood() == 1 && listaEventos2.get(j) == " conseguiu o first blood") {
                    
                } else {
                    jLabel6.setText(pl+listaEventos2.get(j));
                }
                
                if (listaEventos2.get(j) == " conseguiu o first blood")  {
                    listaEventos2.remove(j);
                    listaEventos2.add(" destruiu o primeiro dragão");
                    partidaAux.setFirstBlood(1);
                    
                } else if (listaEventos2.get(j) == " destruiu a primeira torre (BOT)"){
                    listaEventos2.remove(j);
                    listaEventos2.add(" destruiu a segunda torre (BOT)");
                } else if (listaEventos2.get(j) == " destruiu a primeira torre (MID)"){
                    listaEventos2.remove(j);
                    listaEventos2.add(" destruiu a segunda torre (MID)");
                } else if (listaEventos2.get(j) == " destruiu a primeira torre (TOP)"){
                    listaEventos2.remove(j);
                    listaEventos2.add(" destruiu a segunda torre (TOP)");
                } else if (listaEventos2.get(j) == " destruiu a segunda torre (BOT)"){
                    listaEventos2.remove(j);
                    listaEventos2.add(" destruiu a terceira torre (BOT)");
                } else if (listaEventos2.get(j) == " destruiu a segunda torre (MID)"){
                    listaEventos2.remove(j);
                    listaEventos2.add(" destruiu a terceira torre (MID)");
                } else if (listaEventos2.get(j) == " destruiu a segunda torre (TOP)"){
                    listaEventos2.remove(j);
                    listaEventos2.add(" destruiu a terceira torre (TOP)");
                } else if (listaEventos2.get(j) == " destruiu a terceira torre (BOT)"){
                    listaEventos2.remove(j);
                    listaEventos2.add(" destruiu a o inibidor (BOT)");
                } else if (listaEventos2.get(j) == " destruiu a terceira torre (MID)"){
                    listaEventos2.remove(j);
                    listaEventos2.add(" destruiu a o inibidor (MID)");
                } else if (listaEventos2.get(j) == " destruiu a terceira torre (TOP)"){
                    listaEventos2.remove(j);
                    listaEventos2.add(" destruiu a o inibidor (TOP)");
                } else if (listaEventos2.get(j) == " destruiu o primeiro dragão") {
                    listaEventos2.remove(j);
                    listaEventos2.add(" destruiu o segundo dragão");
                } else if (listaEventos2.get(j) == " destruiu o segundo dragão") {
                    listaEventos2.remove(j);
                    listaEventos2.add(" destruiu o arauto");
                } else if (listaEventos2.get(j) == " destruiu o arauto"){
                    listaEventos2.remove(j);
                    t2.setFlag(3);
                } else if (listaEventos2.get(j).contains("inibidor")){
                    listaEventos2.remove(j);
                    listaEventos2.add(" destruiu as torres do nexus");
                } else if (listaEventos2.get(j) == " destruiu as torres do nexus" ) {
                    listaEventos2.remove(j);
                    listaEventos2.add(" destruiu o nexus");
                } else if (listaEventos2.get(j) == " destruiu o nexus"){
                    Dados d = new Dados();
                    d.updateFinais(idTreinador, id2,rodada);

                    int aux = partidaAux.getFlag()+1;
                    partidaAux.setFlag(aux);

                    setVisible(false);
                    janelaPrincipal.setLocationRelativeTo(null);
                    janelaPrincipal.setVisible(true);
                    janelaPrincipal.recebeDados(idTreinador,rodada+1);

                    timer.cancel();
                }  
            }
        };
        timer.scheduleAtFixedRate(task2, segAdversarios, player.calculaTempo(adversariosLambda,playersLambda));
        
        
        
        
    
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    // End of variables declaration//GEN-END:variables
}
